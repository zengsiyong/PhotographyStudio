<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
	 http://www.springframework.org/schema/beans
	 http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--上面的xsd最好和当前使用的Spring版本号一致,如果换了Spring版本,这个最好也跟着改-->
   	<context:annotation-config />

    <!-- 引入外部的properties属性文件 放在最开头,在使用spring之前就引入,里面的变量才能被引用-->
    <!--
    引入属性文件也可以用这种写法
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:config.properties" />
    </bean>
    -->
    <context:property-placeholder location="classpath*:properties/*.properties"/>

    <!-- 自动扫描(需要自动注入的类，对于那些类上有注解：@Repository、@Service、@Controller、@Component都进行注入) -->
    <!--因为 Spring MVC 是 Spring 的子容器，所以我们在 Spring MVC 的配置中再指定扫描 Controller 的注解，这里是父容器的配置地方-->
    <!--注解注入的相关材料可以看：-->
    <!--http://blog.csdn.net/u012763117/article/details/17253849-->
    <!--http://casheen.iteye.com/blog/295348-->
    <!--http://blog.csdn.net/zhang854429783/article/details/6785574-->
    <context:component-scan base-package="com.zengsy.service" />

    <!-- 使用jdbc做数据源-->
	<!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">  -->
	  <!--<property name="driverClassName">  -->
	      <!--<value>com.mysql.jdbc.Driver</value>  -->
	  <!--</property>  -->
	  <!--<property name="url">  -->
	      <!--<value>jdbc:mysql://localhost:3306/zengsy?characterEncoding=UTF-8</value>  -->
	<!---->
	  <!--</property>  -->
	  <!--<property name="username">  -->
	      <!--<value>ssm</value>-->
	  <!--</property>  -->
	  <!--<property name="password">  -->
	      <!--<value>ssm</value>-->
	  <!--</property>  	-->
	<!--</bean>-->



	<!-- 使用阿里的druid配置数据源 start-->
	<!--具体查看官网信息：https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE-->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!--这三个变量读取config.properties的基本属性url，user，password-->
		<property name="url" value="${data_source_url}"/>
		<property name="username" value="${data_source_username}"/>
		<property name="password" value="${data_source_password}"/>

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="1"/>
		<!-- 初始化连接池最大使用连接数量 -->
		<property name="maxActive" value="20"/>
		<!-- 初始化连接池最小空闲 -->
		<property name="minIdle" value="1"/>

		<!-- 获取连接最大等待时间，单位毫秒-->
		<property name="maxWait" value="60000"/>

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000"/>
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000"/>

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<!--如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。-->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

		<property name="validationQuery" value="${validation_query}"/>
		<property name="testWhileIdle" value="true"/>
		<property name="testOnBorrow" value="false"/>
		<property name="testOnReturn" value="false"/>


		<!--当程序存在缺陷时，申请的连接忘记关闭，这时候，就存在连接泄漏了。Druid提供了RemoveAbandanded相关配置，用来关闭长时间不使用的连接-->
		<!--配置removeAbandoned对性能会有一些影响，建议怀疑存在泄漏之后再打开。在上面的配置中，如果连接超过30分钟未关闭，就会被强行回收，并且日志记录连接申请时的调用堆栈。-->
		<!--具体查看官网信息：https://github.com/alibaba/druid/wiki/%E8%BF%9E%E6%8E%A5%E6%B3%84%E6%BC%8F%E7%9B%91%E6%B5%8B-->
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true"/>
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800"/>
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true"/>

		<!-- 配置监控统计拦截的filters-->
		<!--官网信息：https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter-->
		<!--mergeSql可以合并输出的sql，方便查看，但是在mybatis框架中使用这个则无法监控sql,需要用stat-->
		<!--<property name="filters" value="mergeSql,log4j"/>-->
		<!--<property name="filters" value="mergeSql,wall"/>-->
		<!--<property name="filters" value="stat"/>-->
		<!--<property name="filters" value="mergeSql"/>-->
		<property name="filters" value="stat,log4j"/>
	</bean>
	<!-- 使用阿里的druid配置数据源 end-->


	<!-- spring和MyBatis整合，不需要mybatis的配置映射文件 -->
	<!--Mybatis的SessionFactory配置-->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 扫描实体类所在的包 -->
        <property name="typeAliasesPackage" value="com.zengsy.pojo" />
		<!-- 添加数据源的配置 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描存放SQL语句的 mapper.xml文件(读取的是编译出来的classes目录下的具体模块的mapper目录下的任意xml文件) -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
		<!-- 配置分页工具类PageHelper -->
		<!--分页插件，目前先注释，后面重构的时候才会使用
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>
                        </value>
                    </property>
                </bean>
            </array>
        </property>
        -->
	</bean>

    <!-- 自动扫描mybatis所映射的mapper类-->
    <!-- mapper 接口所在包名，MapperScannerConfigurer会自动扫描basePackage指定的包，找到映射接口类和映射XML文件，并进行注入 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zengsy.mapper"/>
	</bean>
	


</beans>